
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02_structural_modeling/04_model_spremberg_building.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02_structural_modeling_04_model_spremberg_building.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02_structural_modeling_04_model_spremberg_building.py:


Construct Spremberg: Building initial model
--------------------------------------------

This example demonstrates...

.. GENERATED FROM PYTHON SOURCE LINES 8-17

.. code-block:: Python


    # sphinx_gallery_thumbnail_number = -2
    import numpy as np

    import gempy as gp
    import gempy_viewer as gpv
    from subsurface.modules.visualization import to_pyvista_line, to_pyvista_points
    from vector_geology.model_contructor.spremberg import generate_spremberg_model, get_spremberg_borehole_set, add_wells_plot








.. GENERATED FROM PYTHON SOURCE LINES 18-48

.. code-block:: Python

    elements_to_gempy = {
            "Buntsandstein"       : {
                    "id"   : 53_300,
                    "color": "#983999"
            },
            "Werra-Anhydrit"      : {
                    "id"   : 61_730,
                    "color": "#00923f"
            },
            # "Kupferschiefer"      : {
            #         "id"   : 61_760,
            #         "color": "#da251d"
            # },
            "Zechsteinkonglomerat": {
                    "id"   : 61_770,
                    "color": "#f8c300"
            },
            "Rotliegend"          : {
                    "id"   : 62_000,
                    "color": "#bb825b"
            }
    }

    spremberg_boreholes = get_spremberg_borehole_set()
    geo_model: gp.data.GeoModel = generate_spremberg_model(
        borehole_set=spremberg_boreholes,
        elements_to_gempy=elements_to_gempy,
        plot=False
    )




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_001.png
   :alt: 04 model spremberg building
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_001.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_002.png
   :alt: 04 model spremberg building
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:116: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      lith_df['top'] = -np.abs(lith_df['top'])
    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:117: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      lith_df['base'] = -np.abs(lith_df['base'])
    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:80: UserWarning: inc and/or azi columns are not present in the file. The boreholes will be straight.
      warnings.warn(
    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    ('cell',) are not coordinates with an index xarray dataset must include 'cell' key (KeyError) or xarray 'cell' has no index (ValueError).




.. GENERATED FROM PYTHON SOURCE LINES 49-50

Add one orientation to the model

.. GENERATED FROM PYTHON SOURCE LINES 50-63

.. code-block:: Python

    rotliegend: gp.data.StructuralElement = geo_model.structural_frame.get_element_by_name("Rotliegend")
    gp.add_orientations(
        geo_model=geo_model,
        x=[5_460_077.527386775, 5_450_077.527386775],
        y=[5_720_030.2446156405, 5_710_030.2446156405],
        z=[-600, -600],
        elements_names=["Rotliegend", "Rotliegend"],
        pole_vector=[
                np.array([.7, 0.7, 0.2]),
                np.array([-1, 0, 0.2])
        ],
    )






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">

            <table>
              <tr><td>Structural Groups:</td><td>
        <table style="border-left:1.2px solid black;>
          <tr><th colspan="2"><b>StructuralGroup:</b></th></tr>
          <tr><td>Name:</td><td>Stratigraphic Pile</td></tr>
          <tr><td>Structural Relation:</td><td>StackRelationType.ERODE</td></tr>
          <tr><td>Elements:</td><td>
        <table width="50%" style="border-left:15px solid #983999;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Buntsandstein</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #00923f;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Werra-Anhydrit</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #f8c300;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Zechsteinkonglomerat</td></tr>
        </table>
            <br>
        <table width="50%" style="border-left:15px solid #bb825b;">
          <tr><th colspan="2"><b>StructuralElement:</b></th></tr>
          <tr><td>Name:</td><td>Rotliegend</td></tr>
        </table>
            </td></tr>
        </table>
            </td></tr>
              <tr><td>Fault Relations:</td><td><table style="border-collapse: collapse; table-layout: fixed;"><th></th><th style="transform: rotate(-35deg); height:150px; vertical-align: bottom; text-align: center;">Stratigrap...</th><tr><th>Stratigraphic Pile</th><td style="background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></td></tr></table></td></tr>
              <tr><td></td><td>
            <table>
              <tr>
                <td><div style="display: inline-block; background-color: #527682; width: 20px; height: 20px; border: 1px solid black;"></div> True</td>
                <td><div style="display: inline-block; background-color: #FFB6C1; width: 20px; height: 20px; border: 1px solid black;"></div> False</td>
              </tr>
            </table>
            </td></tr>
            </table>
        
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 64-74

.. code-block:: Python

    pivot = [5_478_256.5, 5_698_528.946534388]
    point_2 = [5_483_077.527386775, 5_710_030.2446156405]
    point_3 = [5_474_977.5974836275, 5_712_059.373443342]
    section_dict = {
            'section1': (pivot, point_2, [100, 100]),
            'section2': (pivot, point_3, [100, 100]),
            'section3': (point_2, point_3, [100, 100])
    }









.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: Python

    gp.set_section_grid(geo_model.grid, section_dict)
    gpv.plot_section_traces(geo_model)




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_003.png
   :alt: Cell Number: -1 Direction: z
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: GridTypes.NONE|SECTIONS|OCTREE

    <function plot_section_traces at 0x7f14ae14f760>



.. GENERATED FROM PYTHON SOURCE LINES 79-93

.. code-block:: Python

    _ = gpv.plot_3d(
        model=geo_model,
        ve=10,
        image=True,
        transformed_data=True,
        kwargs_pyvista_bounds={
                'show_xlabels': False,
                'show_ylabels': False,
        },
        kwargs_plot_data={
                'arrow_size': 0.001000
        }
    )




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_004.png
   :alt: 04 model spremberg building
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_004.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_005.png
   :alt: 04 model spremberg building
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 94-113

.. code-block:: Python


    # * Ignore curvature for now
    geo_model.interpolation_options.kernel_options.range = 3
    geo_model.interpolation_options.compute_scalar_gradient = False
    geo_model.interpolation_options.evaluation_options.curvature_threshold = 0.4
    geo_model.interpolation_options.evaluation_options.number_octree_levels_surface = 5

    geo_model.interpolation_options.evaluation_options.error_threshold = 1
    geo_model.interpolation_options.evaluation_options.verbose = True


    gp.compute_model(
        gempy_model=geo_model,
        engine_config=gp.data.GemPyEngineConfig(
            backend=gp.data.AvailableBackends.PYTORCH,
            dtype="float64",
        )
    )




.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_006.png
         :alt: Voxel Scalar Values with Refinement Status
         :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_006.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_007.png
         :alt: Voxel Scalar Values with Refinement Status
         :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_007.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH
    Chunking done: 17 chunks
    Number of voxels marked by stats: 407 of torch.Size([512]).
     Number of voxels marked by corners : 245
    Total voxels: 407
    Dense Grid would be 512 voxels
    Chunking done: 15 chunks
    Number of voxels marked by stats: 1677 of torch.Size([3472]).
     Number of voxels marked by corners : 1308
    Total voxels: 1677
    Dense Grid would be 4096 voxels
    Chunking done: 8 chunks
    Chunking done: 63 chunks
    Chunking done: 26 chunks


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <b>Solutions:</b> 5 Octree Levels, 4 DualContouringMeshes
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 114-121

.. code-block:: Python

    gpv.plot_2d(
        model=geo_model,
        figsize=(15, 15),
        ve=10,
        section_names=['section1', 'section2', 'section3']
    )




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_008.png
   :alt: section1, section2, section3
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/gempy_viewer/gempy_viewer/API/_plot_2d_sections_api.py:105: UserWarning: Section contacts not implemented yet. We need to pass scalar field for the sections grid
      warnings.warn(

    <gempy_viewer.modules.plot_2d.visualization_2d.Plot2D object at 0x7f14501aab60>



.. GENERATED FROM PYTHON SOURCE LINES 122-170

.. code-block:: Python

    gempy_plot = gpv.plot_3d(
        model=geo_model,
        show_lith=False,
        ve=10,
        show=False,
        image=False,
        transformed_data=False,
        kwargs_pyvista_bounds={
                'show_xlabels': True,
                'show_ylabels': True,
                'show_zlabels': False,
        },
        kwargs_plot_data={
                'arrow_size': 100.001000
        }
    )

    well_mesh = to_pyvista_line(
        line_set=spremberg_boreholes.combined_trajectory,
        active_scalar="lith_ids",
        radius=10
    )
    units_limit = [0, 20]
    collars = to_pyvista_points(spremberg_boreholes.collars.collar_loc)
    gempy_plot.p.add_mesh(
        well_mesh.threshold(units_limit),
        cmap="tab20c",
        clim=units_limit
    )

    gempy_plot.p.add_mesh(
        collars,
        point_size=10,
        render_points_as_spheres=True
    )

    gempy_plot.p.add_point_labels(
        points=spremberg_boreholes.collars.collar_loc.points,
        labels=spremberg_boreholes.collars.ids,
        point_size=3,
        shape_opacity=0.5,
        font_size=12,
        bold=True
    )

    gempy_plot.p.show()





.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_009.png
   :alt: 04 model spremberg building
   :srcset: /examples/02_structural_modeling/images/sphx_glr_04_model_spremberg_building_009.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 171-179

LiquidEarth Integration
~~~~~~~~~~~~~~~~~~~~~~~
Beyond the classical plotting capabilities introduced in GemPy v3, users can now also upload models to LiquidEarth. 
`LiquidEarth <https://www.terranigma-solutions.com/liquidearth>`_ is a collaborative platform designed for 3D visualization,
developed by many of the main `gempy` maintainers,  with a strong focus on collaboration and sharing. 
This makes it an excellent tool for sharing your models with others and viewing them across different platforms.
To upload a model to LiquidEarth, you must have an account and a user token. Once your model is uploaded, 
you can easily share the link with anyone.

.. GENERATED FROM PYTHON SOURCE LINES 179-191

.. code-block:: Python


    # # %%
    if True:
        link = gpv.plot_to_liquid_earth(
            geo_model=geo_model,
            space_name="Spremberg",
            file_name="gempy_model",
            user_token=None,  # If None, it will try to grab it from the environment
            grab_link=True,
        )

        print(f"Generated Link: {link}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Generated Link: https://liquidearth.app.link/4a7b5726-6ccd-4453-94d7-a9bbe72152a8





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.865 seconds)


.. _sphx_glr_download_examples_02_structural_modeling_04_model_spremberg_building.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 04_model_spremberg_building.ipynb <04_model_spremberg_building.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 04_model_spremberg_building.py <04_model_spremberg_building.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
