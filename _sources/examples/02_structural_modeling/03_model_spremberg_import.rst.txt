
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/02_structural_modeling/03_model_spremberg_import.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_02_structural_modeling_03_model_spremberg_import.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_02_structural_modeling_03_model_spremberg_import.py:


Construct Spremberg: Importing borehole data
--------------------------------------------

This example demonstrates how to construct a 3D geological model of the Model 1 deposit using GemPy. 
It leverages custom APIs to streamline the modeling process.

.. GENERATED FROM PYTHON SOURCE LINES 9-11

Import the necessary libraries for geological modeling and visualization.
sphinx_gallery_thumbnail_number = -1

.. GENERATED FROM PYTHON SOURCE LINES 11-24

.. code-block:: Python

    import os
    import pandas as pd
    import pyvista

    import gempy as gp
    import gempy_viewer as gpv
    from subsurface.core.geological_formats.boreholes.boreholes import BoreholeSet, MergeOptions
    from subsurface.core.geological_formats.boreholes.collars import Collars
    from subsurface.core.geological_formats.boreholes.survey import Survey
    from subsurface.core.reader_helpers.readers_data import GenericReaderFilesHelper
    from subsurface.modules.reader.wells.read_borehole_interface import read_lith, read_survey, read_collar
    from subsurface.modules.visualization import to_pyvista_line, to_pyvista_points, init_plotter








.. GENERATED FROM PYTHON SOURCE LINES 25-26

Initialize the reader for the lithological data. Specify the file path and column mappings.

.. GENERATED FROM PYTHON SOURCE LINES 26-41

.. code-block:: Python

    import dotenv
    dotenv.load_dotenv()
    reader: GenericReaderFilesHelper = GenericReaderFilesHelper(
        file_or_buffer=os.getenv("PATH_TO_SPREMBERG_STRATIGRAPHY"),
        columns_map={
                'hole_id'   : 'id',
                'depth_from': 'top',
                'depth_to'  : 'base',
                'lit_code'  : 'component lith'
        }
    )

    # Read the lithological data into a DataFrame.
    lith: pd.DataFrame = read_lith(reader)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:116: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      lith_df['top'] = -np.abs(lith_df['top'])
    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:117: SettingWithCopyWarning: 
    A value is trying to be set on a copy of a slice from a DataFrame.
    Try using .loc[row_indexer,col_indexer] = value instead

    See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
      lith_df['base'] = -np.abs(lith_df['base'])




.. GENERATED FROM PYTHON SOURCE LINES 42-43

Initialize the reader for the survey data. Specify the file path and column mappings.

.. GENERATED FROM PYTHON SOURCE LINES 43-55

.. code-block:: Python

    reader: GenericReaderFilesHelper = GenericReaderFilesHelper(
        file_or_buffer=os.getenv("PATH_TO_SPREMBERG_SURVEY"),
        columns_map={
                'depth'  : 'md',
                'dip'    : 'dip',
                'azimuth': 'azi'
        },
    )

    # Read the survey data into a DataFrame.
    df = read_survey(reader)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/subsurface/subsurface/modules/reader/wells/read_borehole_interface.py:80: UserWarning: inc and/or azi columns are not present in the file. The boreholes will be straight.
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 56-57

Create a Survey object from the DataFrame and update it with lithological data.

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: Python

    survey: Survey = Survey.from_df(df)
    survey.update_survey_with_lith(lith)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    Well ID 6E_58 not found in survey trajectory. Skipping lithology assignment.
    ('cell',) are not coordinates with an index xarray dataset must include 'cell' key (KeyError) or xarray 'cell' has no index (ValueError).




.. GENERATED FROM PYTHON SOURCE LINES 61-62

Initialize the reader for the collar data. Specify the file path, header, and column mappings.

.. GENERATED FROM PYTHON SOURCE LINES 62-78

.. code-block:: Python

    reader_collar: GenericReaderFilesHelper = GenericReaderFilesHelper(
        file_or_buffer=os.getenv("PATH_TO_SPREMBERG_COLLAR"),
        header=0,
        usecols=[0, 1, 2, 4],
        columns_map={
                "hole_id"            : "id",
                "X_GK5_incl_inserted": "x",
                "Y__incl_inserted"   : "y",
                "Z_GK"               : "z"
        }
    )

    # Read the collar data into a DataFrame and create a Collars object.
    df_collar = read_collar(reader_collar)
    collar = Collars.from_df(df_collar)








.. GENERATED FROM PYTHON SOURCE LINES 79-80

Combine the collar and survey data into a BoreholeSet.

.. GENERATED FROM PYTHON SOURCE LINES 80-86

.. code-block:: Python

    borehole_set = BoreholeSet(
        collars=collar,
        survey=survey,
        merge_option=MergeOptions.INTERSECT
    )








.. GENERATED FROM PYTHON SOURCE LINES 87-88

Visualize the borehole trajectories and collars using PyVista.

.. GENERATED FROM PYTHON SOURCE LINES 88-119

.. code-block:: Python

    well_mesh = to_pyvista_line(
        line_set=borehole_set.combined_trajectory,
        active_scalar="lith_ids",
        radius=10
    )

    collars = to_pyvista_points(
        borehole_set.collars.collar_loc,
    )

    # Initialize the PyVista plotter.
    pyvista_plotter = init_plotter()

    # Define the units limit for thresholding the well mesh.
    units_limit = [0, 20]

    # Add the well mesh and collars to the plotter and display.
    pyvista_plotter.add_mesh(
        well_mesh.threshold(units_limit),
        cmap="tab20c",
        clim=units_limit
    )

    pyvista_plotter.add_mesh(
        collars,
        point_size=10,
        render_points_as_spheres=True
    )

    pyvista_plotter.show()




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_001.png
   :alt: 03 model spremberg import
   :srcset: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 120-121

Create structural elements from the borehole set for different lithological units.

.. GENERATED FROM PYTHON SOURCE LINES 121-147

.. code-block:: Python

    elements: list[gp.data.StructuralElement] = gp.structural_elements_from_borehole_set(
        borehole_set=borehole_set,
        elements_dict={
                "Buntsandstein"       : {
                        "id"   : 53_300,
                        "color": "#983999"
                },
                "Werra-Anhydrit"      : {
                        "id"   : 61_730,
                        "color": "#00923f"
                },
                "Kupfershiefer"       : {
                        "id"   : 61_760,
                        "color": "#da251d"
                },
                "Zechsteinkonglomerat": {
                        "id"   : 61_770,
                        "color": "#f8c300"
                },
                "Rotliegend"          : {
                        "id"   : 62_000,
                        "color": "#bb825b"
                }
        }
    )








.. GENERATED FROM PYTHON SOURCE LINES 148-149

Group the structural elements into a StructuralGroup and create a StructuralFrame.

.. GENERATED FROM PYTHON SOURCE LINES 149-159

.. code-block:: Python

    group = gp.data.StructuralGroup(
        name="Stratigraphic Pile",
        elements=elements,
        structural_relation=gp.data.StackRelationType.ERODE
    )
    structural_frame = gp.data.StructuralFrame(
        structural_groups=[group],
        color_gen=gp.data.ColorsGenerator()
    )








.. GENERATED FROM PYTHON SOURCE LINES 160-161

Determine the extent of the geological model from the surface points coordinates.

.. GENERATED FROM PYTHON SOURCE LINES 161-164

.. code-block:: Python

    all_surface_points_coords: gp.data.SurfacePointsTable = structural_frame.surface_points_copy
    extent_from_data = all_surface_points_coords.xyz.min(axis=0), all_surface_points_coords.xyz.max(axis=0)








.. GENERATED FROM PYTHON SOURCE LINES 165-166

Create a GeoModel with the specified extent, grid resolution, and interpolation options.

.. GENERATED FROM PYTHON SOURCE LINES 166-181

.. code-block:: Python

    geo_model = gp.data.GeoModel(
        name="Stratigraphic Pile",
        structural_frame=structural_frame,
        grid=gp.data.Grid(
            extent=[extent_from_data[0][0], extent_from_data[1][0], extent_from_data[0][1], extent_from_data[1][1], extent_from_data[0][2], extent_from_data[1][2]],
            resolution=(50, 50, 50)
        ),
        interpolation_options=gp.data.InterpolationOptions(
            range=5,
            c_o=10,
            mesh_extraction=True,
            number_octree_levels=3,
        ),
    )








.. GENERATED FROM PYTHON SOURCE LINES 182-183

Visualize the 3D geological model using GemPy's plot_3d function.

.. GENERATED FROM PYTHON SOURCE LINES 183-193

.. code-block:: Python

    gempy_plot = gpv.plot_3d(
        model=geo_model,
        kwargs_pyvista_bounds={
                'show_xlabels': False,
                'show_ylabels': False,
        },
        show=True,
        image=True
    )




.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_002.png
   :alt: 03 model spremberg import
   :srcset: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_002.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_003.png
   :alt: 03 model spremberg import
   :srcset: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 194-195

Combine all visual elements and display them together.

.. GENERATED FROM PYTHON SOURCE LINES 195-223

.. code-block:: Python

    sp_mesh: pyvista.PolyData = gempy_plot.surface_points_mesh

    pyvista_plotter = init_plotter()
    pyvista_plotter.show_bounds(all_edges=True)

    pyvista_plotter.add_mesh(
        well_mesh.threshold(units_limit),
        cmap="tab20c",
        clim=units_limit
    )

    pyvista_plotter.add_mesh(
        collars,
        point_size=10,
        render_points_as_spheres=True
    )

    pyvista_plotter.add_point_labels(
        points=collar.collar_loc.points,
        labels=collar.ids,
        point_size=10,
        shape_opacity=0.5,
        font_size=12,
        bold=True
    )
    pyvista_plotter.add_actor(gempy_plot.surface_points_actor)

    pyvista_plotter.show()



.. image-sg:: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_004.png
   :alt: 03 model spremberg import
   :srcset: /examples/02_structural_modeling/images/sphx_glr_03_model_spremberg_import_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.784 seconds)


.. _sphx_glr_download_examples_02_structural_modeling_03_model_spremberg_import.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_model_spremberg_import.ipynb <03_model_spremberg_import.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_model_spremberg_import.py <03_model_spremberg_import.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
