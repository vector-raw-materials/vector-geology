
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/03_forward_engines/03_HSI_To_Petrophysics.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_03_forward_engines_03_HSI_To_Petrophysics.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03_forward_engines_03_HSI_To_Petrophysics.py:


.. _example_predicting_pwave_velocity:

Predicting P-Wave Velocity from Hyperspectral Data
==================================================

This example demonstrates the prediction of P-Wave velocities from hyperspectral data using machine learning techniques. Hyperspectral data provides detailed information on rock mineralogy, which influences its petrophysical properties. This script aims to explore and quantify the relationship between spectral features and various petrophysical properties, specifically focusing on P-Wave velocity.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

Importing Necessary Libraries
-----------------------------

First, we import the required Python packages. We use `dotenv` to manage environment variables, `numpy` and `sklearn` for numerical operations and machine learning, and custom packages `hklearn` and `hycore` for handling hyperspectral data and machine learning workflows.

.. GENERATED FROM PYTHON SOURCE LINES 15-28

.. code-block:: default


    from dotenv import dotenv_values
    import numpy as np
    import sklearn
    from sklearn.linear_model import LinearRegression
    from sklearn.neural_network import MLPRegressor
    from tqdm import tqdm

    # Custom packages for handling hyperspectral data
    # Note: As of January 2024, these packages are not publicly available. Please contact the author for more information.
    from vector_geology.Packages import hklearn
    from vector_geology.Packages import hycore








.. GENERATED FROM PYTHON SOURCE LINES 29-33

Loading Data with `hycore.Shed`
-------------------------------

The `hycore` package, which organizes hyperspectral data in a structure called Shed, is used here. A Shed makes it convenient to categorize and store hyperspectral data. We use HyLibraries (a data structure within `hylite` for storing spectral libraries) within a Shed to store the hyperspectral data. The corresponding P-Wave velocity measurements are stored as numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 33-53

.. code-block:: default


    # Load the train and test sheds
    config = dotenv_values()
    path_to_train = config.get("PATH_TO_HSI_TRAINING")
    path_to_test = config.get("PATH_TO_HSI_TESTING")

    train_shed = hycore.loadShed(path_to_train)
    test_shed = hycore.loadShed(path_to_test)

    # Load the train and test spectral libraries and P-Wave velocities
    train_fx50 = train_shed.results.FX50Lib
    train_fenix = train_shed.results.FENIXLib
    train_lwir = train_shed.results.LWIRLib
    train_vp = train_shed.results.Vp

    test_fx50 = test_shed.results.FX50Lib
    test_fenix = test_shed.results.FENIXLib
    test_lwir = test_shed.results.LWIRLib
    test_vp = test_shed.results.Vp








.. GENERATED FROM PYTHON SOURCE LINES 54-58

Creating a `hklearn.Stack` Object
---------------------------------

The `hklearn` package, designed to handle hyperspectral data, is used to organize spectral libraries into a structure called Stack. A Stack can manage multiple spectral libraries and integrate data from multiple sensors. We perform hull corrections on the spectra to enhance features of interest.

.. GENERATED FROM PYTHON SOURCE LINES 58-74

.. code-block:: default


    # Create Stack objects and apply hull correction to the spectra
    hsi_train = hklearn.Stack(
        names=['FENIX', 'FX50', 'LWIR'],
        data=[train_fenix, train_fx50, train_lwir]).hc(
        ranges={'FENIX': (450., 2500.), 'FX50': (10, -10), 'LWIR': (10, -10)},
        hull={'FENIX': 'upper', 'FX50': 'lower', 'LWIR': 'lower'}
    )

    hsi_test = hklearn.Stack(
        names=['FENIX', 'FX50', 'LWIR'],
        data=[test_fenix, test_fx50, test_lwir]).hc(
        ranges={'FENIX': (450., 2500.), 'FX50': (10, -10), 'LWIR': (10, -10)},
        hull={'FENIX': 'upper', 'FX50': 'lower', 'LWIR': 'lower'}
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Removing hull:   0%|          | 0/3771 [00:00<?, ?it/s]    Removing hull:   0%|          | 1/3771 [00:01<1:12:24,  1.15s/it]                                                                     Removing hull:   0%|          | 0/3771 [00:00<?, ?it/s]                                                           Removing hull:   0%|          | 0/3771 [00:00<?, ?it/s]                                                           Removing hull:   0%|          | 0/1028 [00:00<?, ?it/s]                                                           Removing hull:   0%|          | 0/1028 [00:00<?, ?it/s]                                                           Removing hull:   0%|          | 0/1028 [00:00<?, ?it/s]                                                       



.. GENERATED FROM PYTHON SOURCE LINES 75-79

Scaling the Dependent Variable (Y)
----------------------------------

The P-Wave velocities are scaled to facilitate the convergence of the loss function during model training. We use the `StandardScaler` from scikit-learn for this purpose.

.. GENERATED FROM PYTHON SOURCE LINES 79-84

.. code-block:: default


    # Scale Y Variable (P-Wave velocity)
    y_scaler = sklearn.preprocessing.StandardScaler()
    _ = y_scaler.fit(train_vp[:, None])








.. GENERATED FROM PYTHON SOURCE LINES 85-89

Transforming the Independent Variable (X)
-----------------------------------------

Hyperspectral data often contains a large number of bands, many of which might be redundant. We apply Principal Component Analysis (PCA) to extract the most significant components. A two-step PCA is performed to ensure that there isn't any inter-sensor correlation. The `Stack` object stores the PCA, which is also applied to the test set.

.. GENERATED FROM PYTHON SOURCE LINES 89-98

.. code-block:: default


    # Apply PCA to the X variable (spectral data)
    PCA_X = hsi_train.fit_pca(n_components=10, normalise=True)
    hsi_test.set_transform(PCA_X)

    # Set the Y-Variable (P-Wave velocity)
    hsi_train.set_y(train_vp[:, None, None])
    hsi_test.set_y(test_vp[:, None, None])








.. GENERATED FROM PYTHON SOURCE LINES 99-103

Initializing and Training Models
--------------------------------

Different machine learning models are initialized and trained. In this example, we use a simple linear regression (`LinearRegression`) and a Multilayer Perceptron (`MLPRegressor`) from scikit-learn. A dictionary with the parameters for optimization is also initialized.

.. GENERATED FROM PYTHON SOURCE LINES 103-123

.. code-block:: default


    # Initialize models
    models = dict(
        Linear=LinearRegression(),
        MLP=MLPRegressor(
            hidden_layer_sizes=(180,),
            max_iter=1000,
            solver='sgd',
            learning_rate='adaptive'
        )
    )

    # Define parameter ranges for each model
    params = dict(Linear={'fit_intercept': [True, False]},
                  MLP={"alpha": np.linspace(1e-4, 1e0)})

    # Train the models
    for name, model in tqdm(models.items(), 'Fitting models', leave=True):
        hsi_train.fit_model(name, model, xtransform=True, ytransform=y_scaler, grid_search_cv=params[name], n_jobs=-1)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Fitting models:   0%|          | 0/2 [00:00<?, ?it/s]    Fitting models:  50%|#####     | 1/2 [00:00<00:00,  1.06it/s]    Fitting models: 100%|##########| 2/2 [00:32<00:00, 18.92s/it]    Fitting models: 100%|##########| 2/2 [00:32<00:00, 16.22s/it]




.. GENERATED FROM PYTHON SOURCE LINES 124-128

Scoring and Evaluating Models
-----------------------------

Finally, the trained models are scored and evaluated. The `Stack.get_score_table()` method is used to display a table with the training, cross-validation, and test scores of the best-performing model.

.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default


    # Evaluate models and display score table
    hsi_train.get_score_table(hsi_test, y_test=None, style=True)





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style type="text/css">
    #T_bdbd1 td.col2 {
      border-right: 3px solid darkgray;
    }
    #T_bdbd1_row0_col0, #T_bdbd1_row0_col1, #T_bdbd1_row0_col2 {
      color: green;
    }
    #T_bdbd1_row1_col0, #T_bdbd1_row1_col1, #T_bdbd1_row1_col2 {
      color: green;
      background-color: lightgreen;
    }
    </style>
    <table id="T_bdbd1">
      <thead>
        <tr>
          <th class="blank level0" >&nbsp;</th>
          <th id="T_bdbd1_level0_col0" class="col_heading level0 col0" >train set</th>
          <th id="T_bdbd1_level0_col1" class="col_heading level0 col1" >5-fold CV</th>
          <th id="T_bdbd1_level0_col2" class="col_heading level0 col2" >test set</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th id="T_bdbd1_level0_row0" class="row_heading level0 row0" >Linear</th>
          <td id="T_bdbd1_row0_col0" class="data row0 col0" >0.686</td>
          <td id="T_bdbd1_row0_col1" class="data row0 col1" >0.662</td>
          <td id="T_bdbd1_row0_col2" class="data row0 col2" >0.614</td>
        </tr>
        <tr>
          <th id="T_bdbd1_level0_row1" class="row_heading level0 row1" >MLP</th>
          <td id="T_bdbd1_row1_col0" class="data row1 col0" >0.876</td>
          <td id="T_bdbd1_row1_col1" class="data row1 col1" >0.822</td>
          <td id="T_bdbd1_row1_col2" class="data row1 col2" >0.695</td>
        </tr>
      </tbody>
    </table>

    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  34.561 seconds)


.. _sphx_glr_download_examples_03_forward_engines_03_HSI_To_Petrophysics.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 03_HSI_To_Petrophysics.py <03_HSI_To_Petrophysics.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 03_HSI_To_Petrophysics.ipynb <03_HSI_To_Petrophysics.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
