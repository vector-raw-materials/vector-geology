
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/03_forward_engines/02_model_1_gempy_fw_gravity.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_03_forward_engines_02_model_1_gempy_fw_gravity.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03_forward_engines_02_model_1_gempy_fw_gravity.py:


Model 1 Forward Gravity
-----------------------  

This script demonstrates the calculation of forward gravity for model 1.
It utilizes libraries such as GemPy, NumPy, and others to handle and process geophysical data.

.. GENERATED FROM PYTHON SOURCE LINES 9-25

.. code-block:: default


    import os
    import time
    import numpy as np
    import pandas as pd
    import xarray as xr
    from matplotlib import pyplot as plt
    from dotenv import dotenv_values
    import gempy as gp
    import gempy_viewer as gpv
    from gempy_engine.core.backend_tensor import BackendTensor
    from vector_geology.bayesian_helpers import calculate_scale_shift
    from vector_geology.model_1_builder import initialize_geo_model
    from vector_geology.omf_to_gempy import process_file
    from vector_geology.utils import extend_box








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Start the timer to measure the execution time of the script

.. GENERATED FROM PYTHON SOURCE LINES 27-29

.. code-block:: default

    start_time = time.time()








.. GENERATED FROM PYTHON SOURCE LINES 30-32

Load environment configuration
This step reads configurations from a .env file, crucial for setting up file paths.

.. GENERATED FROM PYTHON SOURCE LINES 32-35

.. code-block:: default

    config = dotenv_values()
    path = config.get("PATH_TO_MODEL_1_Subsurface")








.. GENERATED FROM PYTHON SOURCE LINES 36-38

Initialize structural elements for the geological model
These will be used to build the model using GemPy.

.. GENERATED FROM PYTHON SOURCE LINES 38-42

.. code-block:: default

    structural_elements = []
    global_extent = None
    color_gen = gp.data.ColorsGenerator()








.. GENERATED FROM PYTHON SOURCE LINES 43-45

Process .nc files for geological model construction
This loop reads and processes each .nc file to extract necessary data for the model.

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    for filename in os.listdir(path):
        base, ext = os.path.splitext(filename)
        if ext == '.nc':
            file_path = os.path.join(path, filename)
            structural_element, global_extent = process_file(file_path, global_extent, color_gen)
            structural_elements.append(structural_element)








.. GENERATED FROM PYTHON SOURCE LINES 53-55

Setup GemPy geological model
Here, the model is initialized with the processed data.

.. GENERATED FROM PYTHON SOURCE LINES 55-62

.. code-block:: default

    geo_model = initialize_geo_model(
        structural_elements=structural_elements,
        extent=(np.array(global_extent)),
        topography=(xr.open_dataset(os.path.join(path, "Topography.nc"))),
        load_nuggets=True
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: ['regular' 'topography']




.. GENERATED FROM PYTHON SOURCE LINES 63-65

Display the initialized GemPy model
It's always good practice to verify the model's initialization.

.. GENERATED FROM PYTHON SOURCE LINES 65-67

.. code-block:: default

    print(geo_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {'_interpolation_options': InterpolationOptions(kernel_options={'range': 5, 'c_o': 10, 'uni_degree': 1, 'i_res': 4, 'gi_res': 2, 'number_dimensions': 3, 'kernel_function': <AvailableKernelFunctions.cubic: KernelFunction(base_function=<function cubic_function at 0x7ff75ef63d90>, derivative_div_r=<function cubic_function_p_div_r at 0x7ff75ef63e20>, second_derivative=<function cubic_function_a at 0x7ff75ef63eb0>, consume_sq_distance=False)>, 'kernel_solver': <Solvers.DEFAULT: 1>, 'compute_condition_number': False, 'optimizing_condition_number': False, 'condition_number': None}, number_octree_levels=6, current_octree_level=0, compute_scalar_gradient=False, mesh_extraction=True, mesh_extraction_masking_options=MeshExtractionMaskingOptions.INTERSECT, mesh_extraction_fancy=True, debug=True, debug_water_tight=False, sigmoid_slope=50000, _number_octree_levels_surface=4, _model_name=None),
     'grid': <gempy.core.data.grid.Grid object at 0x7ff6f77a2920>,
     'meta': GeoModelMeta(name='Tutorial_ch1_1_Basics',
                          creation_date=None,
                          last_modification_date=None,
                          owner=None),
     'structural_frame': StructuralFrame(
            structural_groups=[
    StructuralGroup(
            name=Blue,
            structural_relation=StackRelationType.ERODE,
            elements=[
    Element(
            name=HBL,
            color=#ffbe00,
            is_active=True
    ),
    Element(
            name=KKR,
            color=#A46283,
            is_active=True
    )
    ]
    ),
    StructuralGroup(
            name=Red,
            structural_relation=StackRelationType.ERODE,
            elements=[
    Element(
            name=ABL,
            color=#1D3943,
            is_active=True
    ),
    Element(
            name=LGR,
            color=#6394A4,
            is_active=True
    ),
    Element(
            name=WAL,
            color=#72A473,
            is_active=True
    )
    ]
    )
    ],
            fault_relations=
    [[False, False],
     [False, False]],
    ,
     'transform': {'_is_default_transform': False,
     'position': array([-562422.65655014, -647329.31794742,     823.58712106]),
     'rotation': array([0., 0., 0.]),
     'scale': array([8.55363115e-05, 8.55363115e-05, 8.55363115e-05])}}




.. GENERATED FROM PYTHON SOURCE LINES 68-70

Read Bouguer gravity data from a CSV file
This data is used for geophysical calculations later in the script.

.. GENERATED FROM PYTHON SOURCE LINES 70-76

.. code-block:: default

    df = pd.read_csv(
        filepath_or_buffer=config.get("PATH_TO_MODEL_1_BOUGUER"),
        sep=',',
        header=0
    )








.. GENERATED FROM PYTHON SOURCE LINES 77-79

Filter and prepare the gravity data for further processing
This step ensures we use the relevant subset of the data.

.. GENERATED FROM PYTHON SOURCE LINES 79-82

.. code-block:: default

    df = df[df['X'] < 565000]
    interesting_columns = df[['X', 'Y', 'Bouguer_267_complete']]








.. GENERATED FROM PYTHON SOURCE LINES 83-85

Set up interpolation options for the GemPy model
Configuring interpolation is crucial for accurate geological modeling.

.. GENERATED FROM PYTHON SOURCE LINES 85-91

.. code-block:: default

    interpolation_options = geo_model.interpolation_options
    interpolation_options.mesh_extraction = True
    interpolation_options.kernel_options.range = .7
    interpolation_options.kernel_options.c_o = 3
    interpolation_options.kernel_options.compute_condition_number = True








.. GENERATED FROM PYTHON SOURCE LINES 92-94

Plot the 2D representation of the geological model with gravity data
This visualization helps in understanding the spatial distribution of the data.

.. GENERATED FROM PYTHON SOURCE LINES 94-105

.. code-block:: default

    plot2d = gpv.plot_2d(geo_model, show_topography=True, section_names=["topography"], show=False)
    plot2d.axes[0].scatter(
        interesting_columns['X'],
        interesting_columns['Y'],
        c=interesting_columns['Bouguer_267_complete'],
        cmap='viridis',
        s=100,
        zorder=10000
    )
    plot2d.fig.show()




.. image-sg:: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_001.png
   :alt: Geological map
   :srcset: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 106-108

Calculate and display the script execution time so far
Monitoring execution time is useful for performance optimization.

.. GENERATED FROM PYTHON SOURCE LINES 108-112

.. code-block:: default

    end_time = time.time()
    execution_time = end_time - start_time
    print(f"The function executed in {execution_time} seconds.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The function executed in 2.534396171569824 seconds.




.. GENERATED FROM PYTHON SOURCE LINES 113-115

3D visualization of the geological model
This 3D view provides a comprehensive perspective of the model's structure.

.. GENERATED FROM PYTHON SOURCE LINES 115-122

.. code-block:: default

    gempy_vista = gpv.plot_3d(
        model=geo_model,
        show=True,
        kwargs_plot_structured_grid={'opacity': 0.8},
        image=True
    )




.. image-sg:: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_002.png
   :alt: 02 model 1 gempy fw gravity
   :srcset: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_002.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_003.png
   :alt: 02 model 1 gempy fw gravity
   :srcset: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 123-125

Prepare and set up data for geophysical calculations
Configuring the data correctly is key for accurate gravity calculations.

.. GENERATED FROM PYTHON SOURCE LINES 125-128

.. code-block:: default

    device_location = interesting_columns[['X', 'Y']]
    device_location['Z'] = 0  # Add a Z-coordinate








.. GENERATED FROM PYTHON SOURCE LINES 129-131

Set up a centered grid for geophysical calculations
This grid will be used for gravity gradient calculations.

.. GENERATED FROM PYTHON SOURCE LINES 131-138

.. code-block:: default

    gp.set_centered_grid(
        grid=geo_model.grid,
        centers=device_location,
        resolution=np.array([10, 10, 15]),
        radius=np.array([5000, 5000, 5000])
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: ['regular' 'topography' 'centered']

    CenteredGrid(centers=array([[563661.087, 648441.046,      0.   ],
           [563669.585, 648272.032,      0.   ],
           [563669.949, 648109.941,      0.   ],
           [563957.93 , 646986.009,      0.   ],
           [563872.578, 647286.382,      0.   ],
           [563782.33 , 647474.644,      0.   ],
           [563735.776, 647663.405,      0.   ],
           [563669.181, 647826.937,      0.   ],
           [563661.916, 649593.721,      0.   ],
           [563543.392, 649761.449,      0.   ],
           [563500.952, 650008.198,      0.   ],
           [563504.273, 650133.658,      0.   ],
           [563497.948, 649457.15 ,      0.   ],
           [563534.516, 649329.217,      0.   ],
           [563568.834, 649122.263,      0.   ],
           [563597.443, 648625.232,      0.   ],
           [563512.081, 648836.925,      0.   ]]), resolution=array([10, 10, 15]), radius=array([5000, 5000, 5000]), kernel_grid_centers=array([[-5000.        , -5000.        ,  -300.        ],
           [-5000.        , -5000.        ,  -360.        ],
           [-5000.        , -5000.        ,  -383.36972966],
           ...,
           [ 5000.        ,  5000.        , -3407.68480754],
           [ 5000.        ,  5000.        , -4618.11403801],
           [ 5000.        ,  5000.        , -6300.        ]]), left_voxel_edges=array([[1709.43058496, 1709.43058496,  -30.        ],
           [1709.43058496, 1709.43058496,  -30.        ],
           [1709.43058496, 1709.43058496,  -11.68486483],
           ...,
           [1709.43058496, 1709.43058496, -435.56428767],
           [1709.43058496, 1709.43058496, -605.21461523],
           [1709.43058496, 1709.43058496, -840.942981  ]]), right_voxel_edges=array([[1709.43058496, 1709.43058496,  -30.        ],
           [1709.43058496, 1709.43058496,  -11.68486483],
           [1709.43058496, 1709.43058496,  -16.23606704],
           ...,
           [1709.43058496, 1709.43058496, -605.21461523],
           [1709.43058496, 1709.43058496, -840.942981  ],
           [1709.43058496, 1709.43058496, -840.942981  ]]))



.. GENERATED FROM PYTHON SOURCE LINES 139-141

Change backend for GemPy to support tensor operations
This is necessary for integrating GemPy with PyTorch.

.. GENERATED FROM PYTHON SOURCE LINES 141-143

.. code-block:: default

    BackendTensor.change_backend_gempy(engine_backend=gp.data.AvailableBackends.PYTORCH, dtype="float64")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH




.. GENERATED FROM PYTHON SOURCE LINES 144-146

Calculate the gravity gradient using GemPy
Gravity gradient data is critical for geophysical modeling and inversion.

.. GENERATED FROM PYTHON SOURCE LINES 146-148

.. code-block:: default

    gravity_gradient = gp.calculate_gravity_gradient(geo_model.grid.centered_grid)








.. GENERATED FROM PYTHON SOURCE LINES 149-151

Define and set up densities tensor for the gravity calculation
Densities are a fundamental part of the gravity modeling process.

.. GENERATED FROM PYTHON SOURCE LINES 151-154

.. code-block:: default

    densities_tensor = BackendTensor.t.array([2.61, 2.92, 3.1, 2.92, 2.61, 2.61])
    densities_tensor.requires_grad = True








.. GENERATED FROM PYTHON SOURCE LINES 155-157

Set geophysics input for the GemPy model
Configuring this input is crucial for the forward gravity calculation.

.. GENERATED FROM PYTHON SOURCE LINES 157-162

.. code-block:: default

    geo_model.geophysics_input = gp.data.GeophysicsInput(
        tz=BackendTensor.t.array(gravity_gradient),
        densities=densities_tensor
    )








.. GENERATED FROM PYTHON SOURCE LINES 163-165

Compute the geological model with geophysical data
This computation integrates the geological model with gravity data.

.. GENERATED FROM PYTHON SOURCE LINES 165-175

.. code-block:: default

    sol = gp.compute_model(
        gempy_model=geo_model,
        engine_config=gp.data.GemPyEngineConfig(
            backend=gp.data.AvailableBackends.PYTORCH,
            dtype='float64'
        )
    )
    grav = - sol.gravity
    grav[0].backward()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH
    /home/leguark/gempy/gempy/core/data/geo_model.py:183: UserWarning: You are using refinement and passing a regular grid. The resolution of the regular grid will be overwritten
      warnings.warn(
    Final Iteration 97, Residual Norm: 1.0748418744916176e-07
    Final Iteration 48, Residual Norm: 6.902783759210787e-08




.. GENERATED FROM PYTHON SOURCE LINES 176-178

Output gradient information for analysis
The gradient data can provide insights into the density distribution.

.. GENERATED FROM PYTHON SOURCE LINES 178-180

.. code-block:: default

    print(densities_tensor.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([7.8962e-03, 1.9249e-01, 1.1377e+00, 8.1251e-01, 1.3353e+01, 1.5283e+02])




.. GENERATED FROM PYTHON SOURCE LINES 181-183

Perform scale and shift calculations on the gravity data
These calculations align the model's gravity data with observed values.

.. GENERATED FROM PYTHON SOURCE LINES 183-188

.. code-block:: default

    s, c = calculate_scale_shift(
        a=interesting_columns["Bouguer_267_complete"].values,
        b=(grav.detach().numpy())
    )








.. GENERATED FROM PYTHON SOURCE LINES 189-191

Display the calculated scale and shift values
Understanding these values is important for interpreting the results.

.. GENERATED FROM PYTHON SOURCE LINES 191-194

.. code-block:: default

    print("Scale (s):", s)
    print("Shift (c):", c)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Scale (s): 0.649859429120498
    Shift (c): 437.07950910565876




.. GENERATED FROM PYTHON SOURCE LINES 195-197

Adapt the gravity data based on scale and shift calculations
This step adjusts the model's gravity data to match observed values.

.. GENERATED FROM PYTHON SOURCE LINES 197-200

.. code-block:: default

    adapted_grav = s * interesting_columns["Bouguer_267_complete"] + c
    diff = adapted_grav - grav.detach().numpy()








.. GENERATED FROM PYTHON SOURCE LINES 201-203

Visualization of adapted gravity data
This visualization helps in comparing the model's gravity data with observations.

.. GENERATED FROM PYTHON SOURCE LINES 203-214

.. code-block:: default

    plot2d = gpv.plot_2d(geo_model, show_topography=True, section_names=["topography"], show=False)
    plot2d.axes[0].scatter(
        interesting_columns['X'],
        interesting_columns['Y'],
        c=grav.detach().numpy(),
        cmap='viridis',
        s=100,
        zorder=10000
    )
    plt.show()




.. image-sg:: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_004.png
   :alt: Geological map
   :srcset: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/gempy_viewer/gempy_viewer/API/_plot_2d_sections_api.py:104: UserWarning: Section contacts not implemented yet. We need to pass scalar field for the sections grid
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 215-217

Calculate symmetric vmin and vmax for the colorbar in the difference plot
This step ensures a balanced color representation of positive and negative differences.

.. GENERATED FROM PYTHON SOURCE LINES 217-220

.. code-block:: default

    max_diff = np.max(np.abs(diff))  # Get the maximum absolute value from diff
    vmin, vmax = -max_diff, max_diff  # Set vmin and vmax








.. GENERATED FROM PYTHON SOURCE LINES 221-223

Plotting the difference between adapted and computed gravity data
This plot highlights the discrepancies between the model and observed data.

.. GENERATED FROM PYTHON SOURCE LINES 223-238

.. code-block:: default

    plot2d = gpv.plot_2d(geo_model, show_topography=True, section_names=["topography"], show=False)
    sc = plot2d.axes[0].scatter(
        interesting_columns['X'],
        interesting_columns['Y'],
        c=diff,
        cmap='bwr',
        s=100,
        zorder=10000,
        vmin=vmin,
        vmax=vmax
    )
    plt.colorbar(sc, label="Difference (mGal)")
    plt.show()

    # sphinx_gallery_thumbnail_number = -1



.. image-sg:: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_005.png
   :alt: Geological map
   :srcset: /examples/03_forward_engines/images/sphx_glr_02_model_1_gempy_fw_gravity_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/gempy_viewer/gempy_viewer/API/_plot_2d_sections_api.py:104: UserWarning: Section contacts not implemented yet. We need to pass scalar field for the sections grid
      warnings.warn(





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  7.933 seconds)


.. _sphx_glr_download_examples_03_forward_engines_02_model_1_gempy_fw_gravity.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_model_1_gempy_fw_gravity.py <02_model_1_gempy_fw_gravity.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_model_1_gempy_fw_gravity.ipynb <02_model_1_gempy_fw_gravity.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
