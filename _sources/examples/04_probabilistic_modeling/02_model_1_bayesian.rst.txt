
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/04_probabilistic_modeling/02_model_1_bayesian.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_04_probabilistic_modeling_02_model_1_bayesian.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_04_probabilistic_modeling_02_model_1_bayesian.py:


Probabilistic Inversion Example: Geological Model
--------------------------------------------------

This example demonstrates a probabilistic inversion of a geological model using Bayesian methods.

.. GENERATED FROM PYTHON SOURCE LINES 8-32

.. code-block:: Python


    import os
    import time

    import arviz as az
    import numpy as np
    import pyro
    import pyro.distributions as dist
    import torch
    import xarray as xr
    from dotenv import dotenv_values
    from matplotlib import pyplot as plt
    from pyro.infer import MCMC, NUTS, Predictive

    import gempy as gp
    import gempy_engine
    import gempy_viewer as gpv
    from gempy_engine.core.backend_tensor import BackendTensor
    from gempy_probability.plot_posterior import default_red, default_blue
    from vector_geology.bayesian_helpers import calculate_scale_shift, gaussian_kernel
    from vector_geology.model_1_builder import initialize_geo_model, setup_geophysics
    from vector_geology.omf_to_gempy import process_file









.. GENERATED FROM PYTHON SOURCE LINES 33-34

Config

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: Python

    seed = 123456
    torch.manual_seed(seed)
    pyro.set_rng_seed(seed)








.. GENERATED FROM PYTHON SOURCE LINES 39-40

Start the timer for benchmarking purposes

.. GENERATED FROM PYTHON SOURCE LINES 40-42

.. code-block:: Python

    start_time = time.time()








.. GENERATED FROM PYTHON SOURCE LINES 43-44

Load necessary configuration and paths from environment variables

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: Python

    config = dotenv_values()
    path = config.get("PATH_TO_MODEL_1_Subsurface")








.. GENERATED FROM PYTHON SOURCE LINES 48-49

Initialize lists to store structural elements for the geological model

.. GENERATED FROM PYTHON SOURCE LINES 49-53

.. code-block:: Python

    structural_elements = []
    global_extent = None
    color_gen = gp.data.ColorsGenerator()








.. GENERATED FROM PYTHON SOURCE LINES 54-55

Process each .nc file in the specified directory for model construction

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: Python

    for filename in os.listdir(path):
        base, ext = os.path.splitext(filename)
        if ext == '.nc':
            structural_element, global_extent = process_file(os.path.join(path, filename), global_extent, color_gen)
            structural_elements.append(structural_element)








.. GENERATED FROM PYTHON SOURCE LINES 62-63

Configure GemPy for geological modeling with PyTorch backend

.. GENERATED FROM PYTHON SOURCE LINES 63-71

.. code-block:: Python

    BackendTensor.change_backend_gempy(engine_backend=gp.data.AvailableBackends.PYTORCH, dtype="float64")
    geo_model = initialize_geo_model(
        structural_elements=structural_elements,
        extent=(np.array(global_extent)),
        topography=(xr.open_dataset(os.path.join(path, "Topography.nc"))),
        load_nuggets=True
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH
    /home/leguark/gempy/gempy/core/data/structural_frame.py:206: UserWarning: The basement color was already used in the structural elements.Changing the basement color to #015482.
      warnings.warn(f"The basement color was already used in the structural elements."
    Active grids: GridTypes.NONE|TOPOGRAPHY|DENSE




.. GENERATED FROM PYTHON SOURCE LINES 72-73

Setup geophysics configuration for the model

.. GENERATED FROM PYTHON SOURCE LINES 73-78

.. code-block:: Python

    geophysics_input = setup_geophysics(
        env_path="PATH_TO_MODEL_1_BOUGUER",
        geo_model=geo_model
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: GridTypes.NONE|CENTERED|TOPOGRAPHY|DENSE




.. GENERATED FROM PYTHON SOURCE LINES 79-80

Adjust interpolation options for geological modeling

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: Python

    interpolation_options = geo_model.interpolation_options
    interpolation_options.kernel_options.range = .7
    interpolation_options.kernel_options.c_o = 3
    interpolation_options.kernel_options.compute_condition_number = True








.. GENERATED FROM PYTHON SOURCE LINES 86-87

Compute the geological model

.. GENERATED FROM PYTHON SOURCE LINES 87-95

.. code-block:: Python

    sol = gp.compute_model(
        gempy_model=geo_model,
        engine_config=gp.data.GemPyEngineConfig(
            backend=gp.data.AvailableBackends.PYTORCH,
            dtype='float64'
        )
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH
    Condition number: 146830.09028250765.
    Chunking done: 13 chunks
    Condition number: 276736.9518433538.
    Chunking done: 51 chunks
    Chunking done: 6 chunks
    Chunking done: 7 chunks
    Chunking done: 28 chunks
    Chunking done: 6 chunks
    Chunking done: 25 chunks
    Chunking done: 9 chunks




.. GENERATED FROM PYTHON SOURCE LINES 96-97

Visualize the computed geological model in 3D

.. GENERATED FROM PYTHON SOURCE LINES 97-104

.. code-block:: Python

    gempy_vista = gpv.plot_3d(
        model=geo_model,
        show=True,
        kwargs_plot_structured_grid={'opacity': 0.8},
        image=True
    )




.. image-sg:: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_001.png
   :alt: 02 model 1 bayesian
   :srcset: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_001.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_002.png
   :alt: 02 model 1 bayesian
   :srcset: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 105-106

Calculate and adapt the observed gravity data for model comparison

.. GENERATED FROM PYTHON SOURCE LINES 106-113

.. code-block:: Python

    grav = sol.gravity
    s, c = calculate_scale_shift(
        a=geophysics_input["Bouguer_267_complete"].values,
        b=(grav.detach().numpy())
    )
    adapted_observed_grav = s * geophysics_input["Bouguer_267_complete"] + c








.. GENERATED FROM PYTHON SOURCE LINES 114-115

Plot the 2D gravity data for visualization

.. GENERATED FROM PYTHON SOURCE LINES 115-127

.. code-block:: Python

    plot2d = gpv.plot_2d(geo_model, show_topography=True, section_names=["topography"], show=False)
    sc = plot2d.axes[0].scatter(
        geophysics_input['X'],
        geophysics_input['Y'],
        c=adapted_observed_grav,
        cmap='viridis',
        s=100,
        zorder=10000
    )
    plt.colorbar(sc, label="mGal")
    plt.show()




.. image-sg:: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_003.png
   :alt: Geological map
   :srcset: /examples/04_probabilistic_modeling/images/sphx_glr_02_model_1_bayesian_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/gempy_viewer/gempy_viewer/API/_plot_2d_sections_api.py:105: UserWarning: Section contacts not implemented yet. We need to pass scalar field for the sections grid
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 128-129

Define hyperparameters for the Bayesian geological model

.. GENERATED FROM PYTHON SOURCE LINES 129-133

.. code-block:: Python

    length_scale_prior = torch.tensor(1_000.0)
    variance_prior = torch.tensor(25.0 ** 2)
    covariance_matrix = gaussian_kernel(geophysics_input[['X', 'Y']], length_scale_prior, variance_prior)








.. GENERATED FROM PYTHON SOURCE LINES 134-135

Configure the Pyro model for geological data

.. GENERATED FROM PYTHON SOURCE LINES 135-141

.. code-block:: Python

    prior_tensor = BackendTensor.t.array([2.61, 2.92, 3.1, 2.92, 2.61, 2.61]).to(torch.float64)
    geo_model.geophysics_input = gp.data.GeophysicsInput(
        tz=geo_model.geophysics_input.tz,
        densities=prior_tensor,
    )








.. GENERATED FROM PYTHON SOURCE LINES 142-143

Define the Pyro probabilistic model for inversion

.. GENERATED FROM PYTHON SOURCE LINES 143-171

.. code-block:: Python

    def model(y_obs_list, interpolation_input):
        """
        Pyro model representing the probabilistic aspects of the geological model.
        """
        prior_mean = 2.62
        mu_density = pyro.sample(
            name=r'$\mu_{density}$',
            fn=dist.Normal(prior_mean, torch.tensor(0.5, dtype=torch.float64))
        )
        geo_model.geophysics_input.densities = torch.index_put(
            input=prior_tensor,
            indices=(torch.tensor([3]),),
            values=mu_density
        )
        geo_model.solutions = gempy_engine.compute_model(
            interpolation_input=interpolation_input,
            options=geo_model.interpolation_options,
            data_descriptor=geo_model.input_data_descriptor,
            geophysics_input=geo_model.geophysics_input
        )
        simulated_geophysics = geo_model.solutions.gravity
        pyro.deterministic(r'$\mu_{gravity}$', simulated_geophysics)
        pyro.sample(
            name="obs",
            fn=dist.MultivariateNormal(simulated_geophysics, covariance_matrix),
            obs=y_obs_list
        )








.. GENERATED FROM PYTHON SOURCE LINES 172-173

Prepare observed data for Pyro model and optimize mesh settings

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: Python

    y_obs_list = torch.tensor(adapted_observed_grav.values).view(1, 17)
    interpolation_options.mesh_extraction = False
    interpolation_options.number_octree_levels = 1
    geo_model.grid.active_grids ^= gp.data.Grid.GridTypes.TOPOGRAPHY
    geo_model.grid.active_grids ^= gp.data.Grid.GridTypes.DENSE








.. GENERATED FROM PYTHON SOURCE LINES 180-181

Perform prior sampling and visualize the results

.. GENERATED FROM PYTHON SOURCE LINES 181-188

.. code-block:: Python

    raise NotImplementedError("From this point we need to optimize the code again.")
    if True:
        prior = Predictive(model, num_samples=50)(y_obs_list, interpolation_input=geo_model.interpolation_input_copy)
        data = az.from_pyro(prior=prior)
        az.plot_trace(data.prior)
        plt.show()



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/leguark/vector-geology/examples/04_probabilistic_modeling/02_model_1_bayesian.py", line 181, in <module>
        raise NotImplementedError("From this point we need to optimize the code again.")
    NotImplementedError: From this point we need to optimize the code again.




.. GENERATED FROM PYTHON SOURCE LINES 189-190

Run Markov Chain Monte Carlo (MCMC) using the NUTS algorithm for probabilistic inversion

.. GENERATED FROM PYTHON SOURCE LINES 190-195

.. code-block:: Python

    pyro.primitives.enable_validation(is_validate=True)
    nuts_kernel = NUTS(model)
    mcmc = MCMC(nuts_kernel, num_samples=1000, warmup_steps=300)
    mcmc.run(y_obs_list, interpolation_input=geo_model.interpolation_input_copy)


.. GENERATED FROM PYTHON SOURCE LINES 196-197

Analyze posterior samples and predictives, and visualize the results

.. GENERATED FROM PYTHON SOURCE LINES 197-207

.. code-block:: Python

    posterior_samples = mcmc.get_samples(50)
    posterior_predictive = Predictive(model, posterior_samples)(y_obs_list, interpolation_input=geo_model.interpolation_input_copy)
    data = az.from_pyro(
        posterior=mcmc,
        prior=prior,
        posterior_predictive=posterior_predictive
    )
    az.plot_trace(data)
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 208-210

Create density plots for posterior and prior distributions
These plots provide insights into the parameter distributions and their changes.

.. GENERATED FROM PYTHON SOURCE LINES 210-219

.. code-block:: Python

    az.plot_density(
        data=[data, data.prior],
        shade=.9,
        hdi_prob=.99,
        data_labels=["Posterior", "Prior"],
        colors=[default_red, default_blue],
    )
    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 220-230

.. code-block:: Python

    az.plot_density(
        data=[data.posterior_predictive, data.prior_predictive],
        shade=.9,
        var_names=[r'$\mu_{gravity}$'],
        data_labels=["Posterior Predictive", "Prior Predictive"],
        colors=[default_red, default_blue],
    )
    plt.show()

    # sphinx_gallery_thumbnail_number = -1


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.294 seconds)


.. _sphx_glr_download_examples_04_probabilistic_modeling_02_model_1_bayesian.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02_model_1_bayesian.ipynb <02_model_1_bayesian.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02_model_1_bayesian.py <02_model_1_bayesian.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
