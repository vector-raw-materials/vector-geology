
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/examples/stonepark_gempy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_examples_stonepark_gempy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_examples_stonepark_gempy.py:


Stonepark Geological Model
--------------------------  


Construct a 3D geological model of the Stonepark deposit using GemPy.

.. GENERATED FROM PYTHON SOURCE LINES 10-16

.. code-block:: default


    import time

    start_time = time.time()  # start timer

    import numpy as np







.. GENERATED FROM PYTHON SOURCE LINES 17-18

Read nc from subsurface

.. GENERATED FROM PYTHON SOURCE LINES 21-43

.. code-block:: default

    import os
    from dotenv import dotenv_values

    import matplotlib.pyplot as plt
    import pyvista as pv

    from vector_geology.omf_to_gempy import process_file
    import gempy as gp
    import gempy_viewer as gpv

    config = dotenv_values()
    path = config.get("PATH_TO_STONEPARK_Subsurface")
    structural_elements = []
    accumulated_roi = []
    global_extent = None
    color_gen = gp.data.ColorsGenerator()

    for e, filename in enumerate(os.listdir(path)):
        base, ext = os.path.splitext(filename)
        if ext == '.nc':
            structural_element, global_extent = process_file(os.path.join(path, filename), global_extent, color_gen)
            structural_elements.append(structural_element)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy




.. GENERATED FROM PYTHON SOURCE LINES 44-45

Element 1 is an intrusion

.. GENERATED FROM PYTHON SOURCE LINES 45-91

.. code-block:: default



    #  %%
    # Setup gempy object
    # structural_elements.pop(1)

    structural_group_red = gp.data.StructuralGroup(
        name="Red",
        # elements=[structural_elements[i] for i in [0, 4, 6, 8]],
        elements=[structural_elements[i] for i in [0, 4, 8]],
        structural_relation=gp.data.StackRelationType.ERODE
    )

    structural_group_green = gp.data.StructuralGroup(
        name="Green",
        elements=[structural_elements[i] for i in [5]],
        structural_relation=gp.data.StackRelationType.ERODE
    )

    structural_group_blue = gp.data.StructuralGroup(
        name="Blue",
        elements=[structural_elements[i] for i in [2, 3]],
        structural_relation=gp.data.StackRelationType.ERODE
    )

    structural_group_intrusion = gp.data.StructuralGroup(
        name="Intrusion",
        elements=[structural_elements[i] for i in [1]],
        structural_relation=gp.data.StackRelationType.ERODE
    )

    structural_groups = [structural_group_intrusion, structural_group_green, structural_group_blue, structural_group_red]
    structural_frame = gp.data.StructuralFrame(
        structural_groups=structural_groups[3:],
        color_gen=color_gen
    )
    # TODO: If elements do not have color maybe loop them on structural frame constructor?

    geo_model: gp.data.GeoModel = gp.create_geomodel(
        project_name='Tutorial_ch1_1_Basics',
        extent=global_extent,
        resolution=[20, 10, 20],
        refinement=4,  # * Here we define the number of octree levels. If octree levels are defined, the resolution is ignored.
        structural_frame=structural_frame
    )








.. GENERATED FROM PYTHON SOURCE LINES 92-94

.. code-block:: default

    geo_model





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'grid': <gempy.core.data.grid.Grid object at 0x7f6cd578a710>,
     'interpolation_options': InterpolationOptions(kernel_options={'range': 5, 'c_o': 10, 'uni_degree': 1, 'i_res': 4, 'gi_res': 2, 'number_dimensions': 3, 'kernel_function': <AvailableKernelFunctions.cubic: KernelFunction(base_function=<function cubic_function at 0x7f6d173731c0>, derivative_div_r=<function cubic_function_p_div_r at 0x7f6d17373250>, second_derivative=<function cubic_function_a at 0x7f6d173732e0>, consume_sq_distance=False)>, 'kernel_solver': <Solvers.DEFAULT: 1>, 'compute_condition_number': False, 'optimizing_condition_number': False, 'condition_number': None}, number_octree_levels=4, current_octree_level=0, compute_scalar_gradient=False, mesh_extraction=True, mesh_extraction_masking_options=MeshExtractionMaskingOptions.INTERSECT, mesh_extraction_fancy=True, debug=True, debug_water_tight=False, sigmoid_slope=50000, _number_octree_levels_surface=4),
     'meta': GeoModelMeta(name='Tutorial_ch1_1_Basics',
                          creation_date=None,
                          last_modification_date=None,
                          owner=None),
     'structural_frame': StructuralFrame(
    	structural_groups=[
    StructuralGroup(
    	name=Red,
    	structural_relation=StackRelationType.ERODE,
    	elements=[
    Element(
    	name=Stonepark_ABL,
    	color=#015482,
    	is_active=True
    ),
    Element(
    	name=Stonepark_LGR,
    	color=#443988,
    	is_active=True
    ),
    Element(
    	name=Stonepark_WAL,
    	color=#72e54a,
    	is_active=True
    )
    ]
    )
    ],
    	fault_relations=
    [[False]],
    ,
     'transform': {'_is_default_transform': False,
     'position': array([-562421.55385035, -647345.20645718,     837.3879009 ]),
     'rotation': array([0., 0., 0.]),
     'scale': array([8.5105374e-05, 8.5105374e-05, 8.5105374e-05])}}



.. GENERATED FROM PYTHON SOURCE LINES 95-96

gpv.plot_3d(geo_model)

.. GENERATED FROM PYTHON SOURCE LINES 96-175

.. code-block:: default


    geo_model.interpolation_options.mesh_extraction = True
    geo_model.interpolation_options.kernel_options.compute_condition_number = True
    geo_model.interpolation_options.kernel_options.range = 0.7
    geo_model.interpolation_options.kernel_options.c_o = 4

    surface_points_copy = geo_model.surface_points

    geo_model.update_transform()

    if REUSE_NUGGETS := True:
        loaded_nuggets = np.load("nuggets.npy")
        gp.modify_surface_points(
            geo_model,
            slice=None,
            nugget=loaded_nuggets
        )

        geo_model.interpolation_options.kernel_options.compute_condition_number = False
        gp.compute_model(
            geo_model,
            engine_config=gp.data.GemPyEngineConfig(
                backend=gp.data.AvailableBackends.PYTORCH,
            ),
        )
    else:
        gp.API.compute_API.optimize_and_compute(
            geo_model=geo_model,
            engine_config=gp.data.GemPyEngineConfig(
                backend=gp.data.AvailableBackends.PYTORCH,
            ),
            max_epochs=100,
            convergence_criteria=1e5
        )

    gpv.plot_2d(geo_model, show_scalar=True)

    nugget_effect = geo_model.taped_interpolation_input.surface_points.nugget_effect_scalar
    np.save("nuggets", nugget_effect.detach().numpy())

    surface_points_xyz = geo_model.surface_points.df[['X', 'Y', 'Z']].to_numpy()

    nugget_numpy = nugget_effect.detach().numpy()[:]

    array_to_plot = nugget_numpy

    plt.hist(nugget_numpy, bins=50, color='black', alpha=0.7, log=True)
    plt.xlabel('Eigenvalue')
    plt.ylabel('Frequency')
    plt.title('Histogram of Eigenvalues (nugget-grad)')
    plt.show()
    clean_sp = surface_points_xyz[1:]

    end_time = time.time()
    execution_time = end_time - start_time

    print(f"The function executed in {execution_time} seconds.")

    gempy_vista = gpv.plot_3d(
        model=geo_model,
        show=False,
        kwargs_plot_structured_grid={'opacity': 0.3}
    )

    if ADD_ORIGINAL_MESH := False:
        gempy_vista.p.add_mesh(triangulated_mesh, color="red", opacity=0.5)

    # Create a point cloud mesh
    point_cloud = pv.PolyData(surface_points_xyz[0:])
    point_cloud['values'] = array_to_plot  # Add the log values as a scalar array

    gempy_vista.p.add_mesh(
        point_cloud,
        scalars='values',
        cmap='inferno',
        point_size=25,
    )

    gempy_vista.p.show()



.. image-sg:: /examples/examples/images/sphx_glr_stonepark_gempy_001.png
   :alt: stonepark gempy
   :srcset: /examples/examples/images/sphx_glr_stonepark_gempy_001.png
   :class: sphx-glr-single-img

.. image-sg:: /examples/examples/images/sphx_glr_stonepark_gempy_002.png
   :alt: Histogram of Eigenvalues (nugget-grad)
   :srcset: /examples/examples/images/sphx_glr_stonepark_gempy_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH
    /home/leguark/gempy/gempy/core/data/geo_model.py:164: UserWarning: You are using refinement and passing a regular grid. The resolution of the regular grid will be overwritten
      warnings.warn(
    The function executed in 12.949048519134521 seconds.





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  14.924 seconds)


.. _sphx_glr_download_examples_examples_stonepark_gempy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: stonepark_gempy.py <stonepark_gempy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: stonepark_gempy.ipynb <stonepark_gempy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
